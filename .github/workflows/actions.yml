name: my_rpg

on:
    push:
      branches-ignores:
        - "ga-ignore-**"
    pull_request:
      branches-ignores:
        - "ga-ignores-**"


env:
  MIRROR_URL: git@github.com:EpitechPromo2026/B-MUL-200-REN-2-1-myrpg-thomas.juin.git
  MAX_SIZE: 30000000

jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    name: check_repository_cleanliness
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check file existence
        run: FIND=$(find . -name "#*#" -o -name "*~" -o -name "*.o" -o -name "*.a" -o -name "*.so" -o -name "*.gcno" -o -name "*.gcda" -o -name "*.gcov" -o -wholename "*/tmp/*"); if [[ $FIND != "" ]]; then for element in $FIND; do echo "::error file=$element,line=1,title=Unwanted file detected::$element"; done; exit 1; fi

  size:
      runs-on: ubuntu-latest
      needs: check_repository_cleanliness
      name: check_repo_size
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - name: get_size
          run: SIZE=$(du -bs --exclude=".git" | cut -f1) if [[ "$SIZE" -le "${{ env.MAX_SIZE }}" ]]; then echo "Size OK" else echo "::error Repo size is too big (>30Mb)" fi

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_repository_cleanliness
    name: check_program_compilation
    timeout-minutes: 3
    container: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Make
        run: "make"
      - name: Make clean
        run: "make clean"

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: check_program_compilation
    needs: check_repo_size
    name: push-to-mirror
    if: ${{ github.event_name == 'push' }}
    steps:                                              # <-- must use actions/checkout before mirroring!
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:                              # <-- use 'secrets' to pass credential information.
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
